buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
group = "morph.avaritia"
archivesBaseName = "Avaritia"

sourceCompatibility = targetCompatibility = "1.8"
version = "${mc_version}-${mod_version}"
minecraft {
    version = mc_version + "-" + forge_version
    mappings = mcp_mappings
    runDir = "run"
    makeObfSourceJar = false
}

repositories {
	maven {
		name = "tterrag"
		url = "http://maven.tterrag.com"
	}
    maven {
        name = "JEI"
        url = "http://dvs1.progwml6.com/files/maven"
        }
    maven {
        name 'CB Maven'
        url "http://chickenbones.net/maven/"
    }
    maven {
        name 'OC Maven'
        url "http://maven.cil.li/"
    }
     maven {
        name 'Forestry'
        url "http://maven.ic2.player.to"
    }
	maven {
        name 'Jared'
        url 'http://blamejared.com/maven'
    }
	maven {
		name 'McJtyLib'
        url "http://maven.k-4u.nl"
    }
	maven {
		name 'covers'
        url "http://maven.covers1624.net"
    }
}

// note to covers:
// Keep these deobf deps. Using the compiled deobf jars from maven requires EVERYTHING to use the same mappings
// Using the deobfCompiled versions of the universal jars deobfuscates the jars to match the mappings specified in gradle.properties
dependencies {
    deobfCompile "codechicken:CodeChickenLib:${mc_version}-${ccl_version}:universal"
	//deobfProvided "mezz.jei:jei_${mc_version}:${jei_version}:api" - mezz told me to do this shit..but then JEI doesn't work indev so i dunno
	//runtime "mezz.jei:jei_${mc_version}:${jei_version}"
    deobfCompile "mezz.jei:jei_${mc_version}:+"
    deobfCompile "slimeknights:TConstruct:${mc_version}-${tinkers_version}"
    deobfCompile "slimeknights.mantle:Mantle:${mc_version}-${mantle_version}"
    deobfCompile "mcjty.theoneprobe:TheOneProbe:1.1x-${top_version}"
	deobfCompile "com.github.mcjty:compatlayer:${mc_version}-${compatlayer_version}"
    deobfCompile "MineTweaker3:MineTweaker3-API:${minetweaker_version}"
	deobfCompile "cofh:RedstoneArsenal:${mc_version}-${ra_version}:universal"
	deobfCompile "cofh:CoFHCore:${mc_version}-${cofh_core_version}:universal"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mc_version", mc_version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mc_version': mc_version
    }
    rename '(.+_at.cfg)', 'META-INF/$1'
}

def commonManifest = {
    attributes 'FMLAT': 'avaritia_at.cfg'
}

jar {
	classifier = 'universal'
	manifest commonManifest
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest commonManifest
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
    manifest commonManifest
}

// Tell the artifact system about our extra jars
artifacts {
    archives deobfJar
    archives srcJar
}
